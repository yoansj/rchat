{"version":3,"sources":["Components/Login.js","Components/utils.js","Components/Login.jsx","App.js","serviceWorker.js","index.js"],"names":["enterButton","names","login","description","getRndInteger","min","max","Math","floor","random","styles","mainDiv","display","alignItems","flexDirection","title","fontFamily","fontSize","fontWeight","textAlign","paddingBottom","funnySentance","Login","useState","name","setName","redirect","setRedirect","style","length","TextField","id","variant","defaultValue","label","required","onChange","event","target","value","Button","paddingTop","color","onClick","alert","push","to","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kPAEaA,EAAc,CACvB,mBACA,iBACA,sBACA,gBACA,6BAGSC,EAAQ,CACjB,WACA,WACA,0BAGSC,EAAQ,CACjB,gBACA,oBACA,uBAGSC,EAAc,CACvB,wCACA,6CACA,qDCzBG,SAASC,EAAcC,EAAKC,GAC/B,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAOA,ECS1D,IAAMK,EAAS,CACXC,QAAS,CACLC,QAAS,OACTC,WAAY,SACZC,cAAe,UAEnBC,MAAO,CACHC,WAAY,cACZC,SAAU,GACVC,WAAY,IACZC,UAAW,SACXC,cAAe,GAEnBC,cAAe,CACXL,WAAY,cACZC,SAAU,GACVC,WAAY,IACZC,UAAW,SACXC,cAAe,KAyCRE,MArCf,WAAkB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAESF,mBAAS,MAFlB,gCAGmBA,oBAAS,IAH5B,mBAGNG,EAHM,KAGIC,EAHJ,KAab,OACI,yBAAKC,MAAOlB,EAAOC,SACf,wBAAIiB,MAAOlB,EAAOK,OAAlB,SAGA,wBAAIa,MAAOlB,EAAOW,eACblB,EAAYC,EAAc,EAAGD,EAAY0B,OAAS,KAEvD,kBAACC,EAAA,EAAD,CACIC,GAAG,OACHC,QAAQ,WACRC,aAAchC,EAAMG,EAAc,EAAGH,EAAM4B,SAC3CK,MAAOhC,EAAME,EAAc,EAAGF,EAAM2B,OAAS,IAC7CM,UAAQ,EACRC,SAAU,SAACC,GAAD,OAAWZ,EAAQY,EAAMC,OAAOC,UAE9C,kBAACC,EAAA,EAAD,CAAQZ,MAAO,CAACa,WAAY,IAAKC,MAAM,UAAUC,QAAS,WAvBjD,KAATnB,GAAwB,OAATA,EACfG,GAAY,GAEZiB,MAAM,qBAqBD5C,EAAYI,EAAc,EAAGJ,EAAY6B,OAAS,KAEtDH,GAAY,kBAAC,IAAD,CAAUmB,MAAI,EAACC,GAAG,cCpC5BC,MAjBf,WACI,OACA,6BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KACd,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,WACR,gDCRAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.77db41b4.chunk.js","sourcesContent":["// Random sentances for the Login Component\n\nexport const enterButton = [\n    \"Enter the jungle\",\n    \"Join the party\",\n    \"Join the randomness\",\n    \"Join the chat\",\n    \"Enter Dexter's Laboratory\"\n]\n\nexport const names = [\n    \"John Doe\",\n    \"Jane Doe\",\n    \"Dexter (the scientist)\",\n]\n\nexport const login = [\n    \"Who are you ?\",\n    \"Identify yourself\",\n    \"Name must you enter\",\n]\n\nexport const description = [\n    \"A website where you chat with randoms\",\n    \"A website where a lot of things are random\",\n    \"A website where you can write a bunch of nonsense\"\n]","export function getRndInteger(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) ) + min;\n}\n\nexport function getRndFloat(min, max) {\n    return (Math.random() * (max - min + 1)) + min;\n}","import React, { useState } from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nimport { Redirect } from 'react-router';\n\nimport { description, enterButton, login, names } from './Login';\nimport { getRndInteger } from './utils';\n\nconst styles = {\n    mainDiv: {\n        display: 'flex',\n        alignItems: 'center',\n        flexDirection: 'column',\n    },\n    title: {\n        fontFamily: 'Roboto Mono',\n        fontSize: 50,\n        fontWeight: 900,\n        textAlign: 'center',\n        paddingBottom: 0\n    },\n    funnySentance: {\n        fontFamily: 'Roboto Mono',\n        fontSize: 30,\n        fontWeight: 900,\n        textAlign: 'center',\n        paddingBottom: 50\n    }\n}\n\nfunction Login() {\n    const [name, setName] = useState(\"\");\n    const [err, setErr] = useState(null);\n    const [redirect, setRedirect] = useState(false);\n\n    function checkValidity() {\n        if (name !== \"\" && name !== null) {\n            setRedirect(true);\n        } else {\n            alert(\"Invalid name :(\");\n        }\n    }\n\n    return (\n        <div style={styles.mainDiv}>\n            <h1 style={styles.title}>\n                Rchat\n            </h1>\n            <h1 style={styles.funnySentance}>\n                {description[getRndInteger(0, description.length - 1)]}\n            </h1>\n            <TextField\n                id=\"test\"\n                variant=\"outlined\"\n                defaultValue={names[getRndInteger(0, names.length)]}\n                label={login[getRndInteger(0, login.length - 1)]}\n                required\n                onChange={(event) => setName(event.target.value)} \n            />\n            <Button style={{paddingTop: 20}} color=\"primary\" onClick={() => checkValidity()}>\n                {enterButton[getRndInteger(0, enterButton.length - 1)]}\n            </Button>\n            {redirect && <Redirect push to=\"/choose\" />}\n        </div>\n    );\n}\n\nexport default Login;","import React from 'react';\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\n\nimport Login from './Components/Login.jsx'\n\nfunction App() {\n    return (\n    <div>\n        <Router>\n            <Switch>\n                <Route exact path=\"/\">\n                    <Login />\n                </Route>\n                <Route path=\"/choose\">\n                    <h6>Hello there</h6>\n                </Route>\n            </Switch>\n        </Router>\n    </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}